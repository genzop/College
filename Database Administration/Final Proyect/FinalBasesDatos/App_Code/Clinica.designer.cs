#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FinalBaseDatos")]
public partial class ClinicaDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertEspecialidad(Especialidad instance);
  partial void UpdateEspecialidad(Especialidad instance);
  partial void DeleteEspecialidad(Especialidad instance);
  partial void InsertUsuario(Usuario instance);
  partial void UpdateUsuario(Usuario instance);
  partial void DeleteUsuario(Usuario instance);
  partial void InsertFactura(Factura instance);
  partial void UpdateFactura(Factura instance);
  partial void DeleteFactura(Factura instance);
  partial void InsertFacturaDetalle(FacturaDetalle instance);
  partial void UpdateFacturaDetalle(FacturaDetalle instance);
  partial void DeleteFacturaDetalle(FacturaDetalle instance);
  partial void InsertMedico(Medico instance);
  partial void UpdateMedico(Medico instance);
  partial void DeleteMedico(Medico instance);
  partial void InsertMedicoEspecialidad(MedicoEspecialidad instance);
  partial void UpdateMedicoEspecialidad(MedicoEspecialidad instance);
  partial void DeleteMedicoEspecialidad(MedicoEspecialidad instance);
  partial void InsertMedicoServicio(MedicoServicio instance);
  partial void UpdateMedicoServicio(MedicoServicio instance);
  partial void DeleteMedicoServicio(MedicoServicio instance);
  partial void InsertObraSocial(ObraSocial instance);
  partial void UpdateObraSocial(ObraSocial instance);
  partial void DeleteObraSocial(ObraSocial instance);
  partial void InsertPacientePlan(PacientePlan instance);
  partial void UpdatePacientePlan(PacientePlan instance);
  partial void DeletePacientePlan(PacientePlan instance);
  partial void InsertPlan(Plan instance);
  partial void UpdatePlan(Plan instance);
  partial void DeletePlan(Plan instance);
  partial void InsertServicio(Servicio instance);
  partial void UpdateServicio(Servicio instance);
  partial void DeleteServicio(Servicio instance);
  partial void InsertTipoUsuario(TipoUsuario instance);
  partial void UpdateTipoUsuario(TipoUsuario instance);
  partial void DeleteTipoUsuario(TipoUsuario instance);
  partial void InsertHistoriaClinica(HistoriaClinica instance);
  partial void UpdateHistoriaClinica(HistoriaClinica instance);
  partial void DeleteHistoriaClinica(HistoriaClinica instance);
  partial void InsertPaciente(Paciente instance);
  partial void UpdatePaciente(Paciente instance);
  partial void DeletePaciente(Paciente instance);
  partial void InsertTurno(Turno instance);
  partial void UpdateTurno(Turno instance);
  partial void DeleteTurno(Turno instance);
  partial void InsertConsultaHistoriaClinica(ConsultaHistoriaClinica instance);
  partial void UpdateConsultaHistoriaClinica(ConsultaHistoriaClinica instance);
  partial void DeleteConsultaHistoriaClinica(ConsultaHistoriaClinica instance);
  #endregion
	
	public ClinicaDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FinalBaseDatosConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public ClinicaDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ClinicaDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ClinicaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ClinicaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Especialidad> Especialidads
	{
		get
		{
			return this.GetTable<Especialidad>();
		}
	}
	
	public System.Data.Linq.Table<Usuario> Usuarios
	{
		get
		{
			return this.GetTable<Usuario>();
		}
	}
	
	public System.Data.Linq.Table<Factura> Facturas
	{
		get
		{
			return this.GetTable<Factura>();
		}
	}
	
	public System.Data.Linq.Table<FacturaDetalle> FacturaDetalles
	{
		get
		{
			return this.GetTable<FacturaDetalle>();
		}
	}
	
	public System.Data.Linq.Table<Medico> Medicos
	{
		get
		{
			return this.GetTable<Medico>();
		}
	}
	
	public System.Data.Linq.Table<MedicoEspecialidad> MedicoEspecialidads
	{
		get
		{
			return this.GetTable<MedicoEspecialidad>();
		}
	}
	
	public System.Data.Linq.Table<MedicoServicio> MedicoServicios
	{
		get
		{
			return this.GetTable<MedicoServicio>();
		}
	}
	
	public System.Data.Linq.Table<ObraSocial> ObraSocials
	{
		get
		{
			return this.GetTable<ObraSocial>();
		}
	}
	
	public System.Data.Linq.Table<PacientePlan> PacientePlans
	{
		get
		{
			return this.GetTable<PacientePlan>();
		}
	}
	
	public System.Data.Linq.Table<Plan> Plans
	{
		get
		{
			return this.GetTable<Plan>();
		}
	}
	
	public System.Data.Linq.Table<Servicio> Servicios
	{
		get
		{
			return this.GetTable<Servicio>();
		}
	}
	
	public System.Data.Linq.Table<TipoUsuario> TipoUsuarios
	{
		get
		{
			return this.GetTable<TipoUsuario>();
		}
	}
	
	public System.Data.Linq.Table<HistoriaClinica> HistoriaClinicas
	{
		get
		{
			return this.GetTable<HistoriaClinica>();
		}
	}
	
	public System.Data.Linq.Table<Paciente> Pacientes
	{
		get
		{
			return this.GetTable<Paciente>();
		}
	}
	
	public System.Data.Linq.Table<Turno> Turnos
	{
		get
		{
			return this.GetTable<Turno>();
		}
	}
	
	public System.Data.Linq.Table<ConsultaHistoriaClinica> ConsultaHistoriaClinicas
	{
		get
		{
			return this.GetTable<ConsultaHistoriaClinica>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Especialidad")]
public partial class Especialidad : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Especialidad;
	
	private bool _Habilitado;
	
	private string _Denominacion;
	
	private EntitySet<MedicoEspecialidad> _MedicoEspecialidads;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_EspecialidadChanging(int value);
    partial void OnID_EspecialidadChanged();
    partial void OnHabilitadoChanging(bool value);
    partial void OnHabilitadoChanged();
    partial void OnDenominacionChanging(string value);
    partial void OnDenominacionChanged();
    #endregion
	
	public Especialidad()
	{
		this._MedicoEspecialidads = new EntitySet<MedicoEspecialidad>(new Action<MedicoEspecialidad>(this.attach_MedicoEspecialidads), new Action<MedicoEspecialidad>(this.detach_MedicoEspecialidads));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Especialidad", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_Especialidad
	{
		get
		{
			return this._ID_Especialidad;
		}
		set
		{
			if ((this._ID_Especialidad != value))
			{
				this.OnID_EspecialidadChanging(value);
				this.SendPropertyChanging();
				this._ID_Especialidad = value;
				this.SendPropertyChanged("ID_Especialidad");
				this.OnID_EspecialidadChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Habilitado", DbType="Bit NOT NULL")]
	public bool Habilitado
	{
		get
		{
			return this._Habilitado;
		}
		set
		{
			if ((this._Habilitado != value))
			{
				this.OnHabilitadoChanging(value);
				this.SendPropertyChanging();
				this._Habilitado = value;
				this.SendPropertyChanged("Habilitado");
				this.OnHabilitadoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Denominacion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Denominacion
	{
		get
		{
			return this._Denominacion;
		}
		set
		{
			if ((this._Denominacion != value))
			{
				this.OnDenominacionChanging(value);
				this.SendPropertyChanging();
				this._Denominacion = value;
				this.SendPropertyChanged("Denominacion");
				this.OnDenominacionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Especialidad_MedicoEspecialidad", Storage="_MedicoEspecialidads", ThisKey="ID_Especialidad", OtherKey="ID_Especialidad")]
	public EntitySet<MedicoEspecialidad> MedicoEspecialidads
	{
		get
		{
			return this._MedicoEspecialidads;
		}
		set
		{
			this._MedicoEspecialidads.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_MedicoEspecialidads(MedicoEspecialidad entity)
	{
		this.SendPropertyChanging();
		entity.Especialidad = this;
	}
	
	private void detach_MedicoEspecialidads(MedicoEspecialidad entity)
	{
		this.SendPropertyChanging();
		entity.Especialidad = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Usuario")]
public partial class Usuario : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Usuario;
	
	private bool _Habilitado;
	
	private string _Nombre;
	
	private string _Contrasenia;
	
	private int _ID_TipoUsuario;
	
	private EntitySet<Medico> _Medicos;
	
	private EntityRef<TipoUsuario> _TipoUsuario;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UsuarioChanging(int value);
    partial void OnID_UsuarioChanged();
    partial void OnHabilitadoChanging(bool value);
    partial void OnHabilitadoChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnContraseniaChanging(string value);
    partial void OnContraseniaChanged();
    partial void OnID_TipoUsuarioChanging(int value);
    partial void OnID_TipoUsuarioChanged();
    #endregion
	
	public Usuario()
	{
		this._Medicos = new EntitySet<Medico>(new Action<Medico>(this.attach_Medicos), new Action<Medico>(this.detach_Medicos));
		this._TipoUsuario = default(EntityRef<TipoUsuario>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Usuario", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_Usuario
	{
		get
		{
			return this._ID_Usuario;
		}
		set
		{
			if ((this._ID_Usuario != value))
			{
				this.OnID_UsuarioChanging(value);
				this.SendPropertyChanging();
				this._ID_Usuario = value;
				this.SendPropertyChanged("ID_Usuario");
				this.OnID_UsuarioChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Habilitado", DbType="Bit NOT NULL")]
	public bool Habilitado
	{
		get
		{
			return this._Habilitado;
		}
		set
		{
			if ((this._Habilitado != value))
			{
				this.OnHabilitadoChanging(value);
				this.SendPropertyChanging();
				this._Habilitado = value;
				this.SendPropertyChanged("Habilitado");
				this.OnHabilitadoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string Nombre
	{
		get
		{
			return this._Nombre;
		}
		set
		{
			if ((this._Nombre != value))
			{
				this.OnNombreChanging(value);
				this.SendPropertyChanging();
				this._Nombre = value;
				this.SendPropertyChanged("Nombre");
				this.OnNombreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contrasenia", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string Contrasenia
	{
		get
		{
			return this._Contrasenia;
		}
		set
		{
			if ((this._Contrasenia != value))
			{
				this.OnContraseniaChanging(value);
				this.SendPropertyChanging();
				this._Contrasenia = value;
				this.SendPropertyChanged("Contrasenia");
				this.OnContraseniaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_TipoUsuario", DbType="Int NOT NULL")]
	public int ID_TipoUsuario
	{
		get
		{
			return this._ID_TipoUsuario;
		}
		set
		{
			if ((this._ID_TipoUsuario != value))
			{
				if (this._TipoUsuario.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_TipoUsuarioChanging(value);
				this.SendPropertyChanging();
				this._ID_TipoUsuario = value;
				this.SendPropertyChanged("ID_TipoUsuario");
				this.OnID_TipoUsuarioChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_Medico", Storage="_Medicos", ThisKey="ID_Usuario", OtherKey="ID_Usuario")]
	public EntitySet<Medico> Medicos
	{
		get
		{
			return this._Medicos;
		}
		set
		{
			this._Medicos.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoUsuario_Usuario", Storage="_TipoUsuario", ThisKey="ID_TipoUsuario", OtherKey="ID_TipoUsuario", IsForeignKey=true)]
	public TipoUsuario TipoUsuario
	{
		get
		{
			return this._TipoUsuario.Entity;
		}
		set
		{
			TipoUsuario previousValue = this._TipoUsuario.Entity;
			if (((previousValue != value) 
						|| (this._TipoUsuario.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TipoUsuario.Entity = null;
					previousValue.Usuarios.Remove(this);
				}
				this._TipoUsuario.Entity = value;
				if ((value != null))
				{
					value.Usuarios.Add(this);
					this._ID_TipoUsuario = value.ID_TipoUsuario;
				}
				else
				{
					this._ID_TipoUsuario = default(int);
				}
				this.SendPropertyChanged("TipoUsuario");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Medicos(Medico entity)
	{
		this.SendPropertyChanging();
		entity.Usuario = this;
	}
	
	private void detach_Medicos(Medico entity)
	{
		this.SendPropertyChanging();
		entity.Usuario = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Factura")]
public partial class Factura : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Factura;
	
	private bool _Habilitado;
	
	private char _Tipo;
	
	private System.DateTime _Fecha;
	
	private string _Estado;
	
	private System.Nullable<double> _SubTotal;
	
	private System.Nullable<double> _Iva;
	
	private System.Nullable<double> _Total;
	
	private System.Nullable<int> _ID_Paciente;
	
	private EntitySet<FacturaDetalle> _FacturaDetalles;
	
	private EntityRef<Paciente> _Paciente;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_FacturaChanging(int value);
    partial void OnID_FacturaChanged();
    partial void OnHabilitadoChanging(bool value);
    partial void OnHabilitadoChanged();
    partial void OnTipoChanging(char value);
    partial void OnTipoChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnEstadoChanging(string value);
    partial void OnEstadoChanged();
    partial void OnSubTotalChanging(System.Nullable<double> value);
    partial void OnSubTotalChanged();
    partial void OnIvaChanging(System.Nullable<double> value);
    partial void OnIvaChanged();
    partial void OnTotalChanging(System.Nullable<double> value);
    partial void OnTotalChanged();
    partial void OnID_PacienteChanging(System.Nullable<int> value);
    partial void OnID_PacienteChanged();
    #endregion
	
	public Factura()
	{
		this._FacturaDetalles = new EntitySet<FacturaDetalle>(new Action<FacturaDetalle>(this.attach_FacturaDetalles), new Action<FacturaDetalle>(this.detach_FacturaDetalles));
		this._Paciente = default(EntityRef<Paciente>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Factura", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_Factura
	{
		get
		{
			return this._ID_Factura;
		}
		set
		{
			if ((this._ID_Factura != value))
			{
				this.OnID_FacturaChanging(value);
				this.SendPropertyChanging();
				this._ID_Factura = value;
				this.SendPropertyChanged("ID_Factura");
				this.OnID_FacturaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Habilitado", DbType="Bit NOT NULL")]
	public bool Habilitado
	{
		get
		{
			return this._Habilitado;
		}
		set
		{
			if ((this._Habilitado != value))
			{
				this.OnHabilitadoChanging(value);
				this.SendPropertyChanging();
				this._Habilitado = value;
				this.SendPropertyChanged("Habilitado");
				this.OnHabilitadoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tipo", DbType="Char(1) NOT NULL")]
	public char Tipo
	{
		get
		{
			return this._Tipo;
		}
		set
		{
			if ((this._Tipo != value))
			{
				this.OnTipoChanging(value);
				this.SendPropertyChanging();
				this._Tipo = value;
				this.SendPropertyChanged("Tipo");
				this.OnTipoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fecha", DbType="DateTime NOT NULL")]
	public System.DateTime Fecha
	{
		get
		{
			return this._Fecha;
		}
		set
		{
			if ((this._Fecha != value))
			{
				this.OnFechaChanging(value);
				this.SendPropertyChanging();
				this._Fecha = value;
				this.SendPropertyChanged("Fecha");
				this.OnFechaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Estado", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Estado
	{
		get
		{
			return this._Estado;
		}
		set
		{
			if ((this._Estado != value))
			{
				this.OnEstadoChanging(value);
				this.SendPropertyChanging();
				this._Estado = value;
				this.SendPropertyChanged("Estado");
				this.OnEstadoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTotal", DbType="Float")]
	public System.Nullable<double> SubTotal
	{
		get
		{
			return this._SubTotal;
		}
		set
		{
			if ((this._SubTotal != value))
			{
				this.OnSubTotalChanging(value);
				this.SendPropertyChanging();
				this._SubTotal = value;
				this.SendPropertyChanged("SubTotal");
				this.OnSubTotalChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Iva", DbType="Float")]
	public System.Nullable<double> Iva
	{
		get
		{
			return this._Iva;
		}
		set
		{
			if ((this._Iva != value))
			{
				this.OnIvaChanging(value);
				this.SendPropertyChanging();
				this._Iva = value;
				this.SendPropertyChanged("Iva");
				this.OnIvaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Float")]
	public System.Nullable<double> Total
	{
		get
		{
			return this._Total;
		}
		set
		{
			if ((this._Total != value))
			{
				this.OnTotalChanging(value);
				this.SendPropertyChanging();
				this._Total = value;
				this.SendPropertyChanged("Total");
				this.OnTotalChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Paciente", DbType="Int")]
	public System.Nullable<int> ID_Paciente
	{
		get
		{
			return this._ID_Paciente;
		}
		set
		{
			if ((this._ID_Paciente != value))
			{
				if (this._Paciente.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_PacienteChanging(value);
				this.SendPropertyChanging();
				this._ID_Paciente = value;
				this.SendPropertyChanged("ID_Paciente");
				this.OnID_PacienteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Factura_FacturaDetalle", Storage="_FacturaDetalles", ThisKey="ID_Factura", OtherKey="ID_Factura")]
	public EntitySet<FacturaDetalle> FacturaDetalles
	{
		get
		{
			return this._FacturaDetalles;
		}
		set
		{
			this._FacturaDetalles.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_Factura", Storage="_Paciente", ThisKey="ID_Paciente", OtherKey="ID_Paciente", IsForeignKey=true)]
	public Paciente Paciente
	{
		get
		{
			return this._Paciente.Entity;
		}
		set
		{
			Paciente previousValue = this._Paciente.Entity;
			if (((previousValue != value) 
						|| (this._Paciente.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Paciente.Entity = null;
					previousValue.Facturas.Remove(this);
				}
				this._Paciente.Entity = value;
				if ((value != null))
				{
					value.Facturas.Add(this);
					this._ID_Paciente = value.ID_Paciente;
				}
				else
				{
					this._ID_Paciente = default(Nullable<int>);
				}
				this.SendPropertyChanged("Paciente");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_FacturaDetalles(FacturaDetalle entity)
	{
		this.SendPropertyChanging();
		entity.Factura = this;
	}
	
	private void detach_FacturaDetalles(FacturaDetalle entity)
	{
		this.SendPropertyChanging();
		entity.Factura = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FacturaDetalle")]
public partial class FacturaDetalle : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_FacturaDetalle;
	
	private bool _Habilitado;
	
	private System.Nullable<int> _ID_Factura;
	
	private System.Nullable<int> _ID_Servicio;
	
	private System.Nullable<int> _Cantidad;
	
	private System.Nullable<double> _SubTotal;
	
	private EntityRef<Factura> _Factura;
	
	private EntityRef<Servicio> _Servicio;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_FacturaDetalleChanging(int value);
    partial void OnID_FacturaDetalleChanged();
    partial void OnHabilitadoChanging(bool value);
    partial void OnHabilitadoChanged();
    partial void OnID_FacturaChanging(System.Nullable<int> value);
    partial void OnID_FacturaChanged();
    partial void OnID_ServicioChanging(System.Nullable<int> value);
    partial void OnID_ServicioChanged();
    partial void OnCantidadChanging(System.Nullable<int> value);
    partial void OnCantidadChanged();
    partial void OnSubTotalChanging(System.Nullable<double> value);
    partial void OnSubTotalChanged();
    #endregion
	
	public FacturaDetalle()
	{
		this._Factura = default(EntityRef<Factura>);
		this._Servicio = default(EntityRef<Servicio>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_FacturaDetalle", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_FacturaDetalle
	{
		get
		{
			return this._ID_FacturaDetalle;
		}
		set
		{
			if ((this._ID_FacturaDetalle != value))
			{
				this.OnID_FacturaDetalleChanging(value);
				this.SendPropertyChanging();
				this._ID_FacturaDetalle = value;
				this.SendPropertyChanged("ID_FacturaDetalle");
				this.OnID_FacturaDetalleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Habilitado", DbType="Bit NOT NULL")]
	public bool Habilitado
	{
		get
		{
			return this._Habilitado;
		}
		set
		{
			if ((this._Habilitado != value))
			{
				this.OnHabilitadoChanging(value);
				this.SendPropertyChanging();
				this._Habilitado = value;
				this.SendPropertyChanged("Habilitado");
				this.OnHabilitadoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Factura", DbType="Int")]
	public System.Nullable<int> ID_Factura
	{
		get
		{
			return this._ID_Factura;
		}
		set
		{
			if ((this._ID_Factura != value))
			{
				if (this._Factura.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_FacturaChanging(value);
				this.SendPropertyChanging();
				this._ID_Factura = value;
				this.SendPropertyChanged("ID_Factura");
				this.OnID_FacturaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Servicio", DbType="Int")]
	public System.Nullable<int> ID_Servicio
	{
		get
		{
			return this._ID_Servicio;
		}
		set
		{
			if ((this._ID_Servicio != value))
			{
				if (this._Servicio.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_ServicioChanging(value);
				this.SendPropertyChanging();
				this._ID_Servicio = value;
				this.SendPropertyChanged("ID_Servicio");
				this.OnID_ServicioChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cantidad", DbType="Int")]
	public System.Nullable<int> Cantidad
	{
		get
		{
			return this._Cantidad;
		}
		set
		{
			if ((this._Cantidad != value))
			{
				this.OnCantidadChanging(value);
				this.SendPropertyChanging();
				this._Cantidad = value;
				this.SendPropertyChanged("Cantidad");
				this.OnCantidadChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTotal", DbType="Float")]
	public System.Nullable<double> SubTotal
	{
		get
		{
			return this._SubTotal;
		}
		set
		{
			if ((this._SubTotal != value))
			{
				this.OnSubTotalChanging(value);
				this.SendPropertyChanging();
				this._SubTotal = value;
				this.SendPropertyChanged("SubTotal");
				this.OnSubTotalChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Factura_FacturaDetalle", Storage="_Factura", ThisKey="ID_Factura", OtherKey="ID_Factura", IsForeignKey=true)]
	public Factura Factura
	{
		get
		{
			return this._Factura.Entity;
		}
		set
		{
			Factura previousValue = this._Factura.Entity;
			if (((previousValue != value) 
						|| (this._Factura.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Factura.Entity = null;
					previousValue.FacturaDetalles.Remove(this);
				}
				this._Factura.Entity = value;
				if ((value != null))
				{
					value.FacturaDetalles.Add(this);
					this._ID_Factura = value.ID_Factura;
				}
				else
				{
					this._ID_Factura = default(Nullable<int>);
				}
				this.SendPropertyChanged("Factura");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Servicio_FacturaDetalle", Storage="_Servicio", ThisKey="ID_Servicio", OtherKey="ID_Servicio", IsForeignKey=true)]
	public Servicio Servicio
	{
		get
		{
			return this._Servicio.Entity;
		}
		set
		{
			Servicio previousValue = this._Servicio.Entity;
			if (((previousValue != value) 
						|| (this._Servicio.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Servicio.Entity = null;
					previousValue.FacturaDetalles.Remove(this);
				}
				this._Servicio.Entity = value;
				if ((value != null))
				{
					value.FacturaDetalles.Add(this);
					this._ID_Servicio = value.ID_Servicio;
				}
				else
				{
					this._ID_Servicio = default(Nullable<int>);
				}
				this.SendPropertyChanged("Servicio");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medico")]
public partial class Medico : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Medico;
	
	private bool _Habilitado;
	
	private string _Nombre;
	
	private string _Apellido;
	
	private string _Matricula;
	
	private System.Nullable<int> _ID_Usuario;
	
	private EntitySet<MedicoEspecialidad> _MedicoEspecialidads;
	
	private EntitySet<MedicoServicio> _MedicoServicios;
	
	private EntitySet<Turno> _Turnos;
	
	private EntityRef<Usuario> _Usuario;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_MedicoChanging(int value);
    partial void OnID_MedicoChanged();
    partial void OnHabilitadoChanging(bool value);
    partial void OnHabilitadoChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnApellidoChanging(string value);
    partial void OnApellidoChanged();
    partial void OnMatriculaChanging(string value);
    partial void OnMatriculaChanged();
    partial void OnID_UsuarioChanging(System.Nullable<int> value);
    partial void OnID_UsuarioChanged();
    #endregion
	
	public Medico()
	{
		this._MedicoEspecialidads = new EntitySet<MedicoEspecialidad>(new Action<MedicoEspecialidad>(this.attach_MedicoEspecialidads), new Action<MedicoEspecialidad>(this.detach_MedicoEspecialidads));
		this._MedicoServicios = new EntitySet<MedicoServicio>(new Action<MedicoServicio>(this.attach_MedicoServicios), new Action<MedicoServicio>(this.detach_MedicoServicios));
		this._Turnos = new EntitySet<Turno>(new Action<Turno>(this.attach_Turnos), new Action<Turno>(this.detach_Turnos));
		this._Usuario = default(EntityRef<Usuario>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Medico", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_Medico
	{
		get
		{
			return this._ID_Medico;
		}
		set
		{
			if ((this._ID_Medico != value))
			{
				this.OnID_MedicoChanging(value);
				this.SendPropertyChanging();
				this._ID_Medico = value;
				this.SendPropertyChanged("ID_Medico");
				this.OnID_MedicoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Habilitado", DbType="Bit NOT NULL")]
	public bool Habilitado
	{
		get
		{
			return this._Habilitado;
		}
		set
		{
			if ((this._Habilitado != value))
			{
				this.OnHabilitadoChanging(value);
				this.SendPropertyChanging();
				this._Habilitado = value;
				this.SendPropertyChanged("Habilitado");
				this.OnHabilitadoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(50)")]
	public string Nombre
	{
		get
		{
			return this._Nombre;
		}
		set
		{
			if ((this._Nombre != value))
			{
				this.OnNombreChanging(value);
				this.SendPropertyChanging();
				this._Nombre = value;
				this.SendPropertyChanged("Nombre");
				this.OnNombreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apellido", DbType="VarChar(50)")]
	public string Apellido
	{
		get
		{
			return this._Apellido;
		}
		set
		{
			if ((this._Apellido != value))
			{
				this.OnApellidoChanging(value);
				this.SendPropertyChanging();
				this._Apellido = value;
				this.SendPropertyChanged("Apellido");
				this.OnApellidoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Matricula", DbType="VarChar(10)")]
	public string Matricula
	{
		get
		{
			return this._Matricula;
		}
		set
		{
			if ((this._Matricula != value))
			{
				this.OnMatriculaChanging(value);
				this.SendPropertyChanging();
				this._Matricula = value;
				this.SendPropertyChanged("Matricula");
				this.OnMatriculaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Usuario", DbType="Int")]
	public System.Nullable<int> ID_Usuario
	{
		get
		{
			return this._ID_Usuario;
		}
		set
		{
			if ((this._ID_Usuario != value))
			{
				if (this._Usuario.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_UsuarioChanging(value);
				this.SendPropertyChanging();
				this._ID_Usuario = value;
				this.SendPropertyChanged("ID_Usuario");
				this.OnID_UsuarioChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medico_MedicoEspecialidad", Storage="_MedicoEspecialidads", ThisKey="ID_Medico", OtherKey="ID_Medico")]
	public EntitySet<MedicoEspecialidad> MedicoEspecialidads
	{
		get
		{
			return this._MedicoEspecialidads;
		}
		set
		{
			this._MedicoEspecialidads.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medico_MedicoServicio", Storage="_MedicoServicios", ThisKey="ID_Medico", OtherKey="ID_Medico")]
	public EntitySet<MedicoServicio> MedicoServicios
	{
		get
		{
			return this._MedicoServicios;
		}
		set
		{
			this._MedicoServicios.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medico_Turno", Storage="_Turnos", ThisKey="ID_Medico", OtherKey="ID_Medico")]
	public EntitySet<Turno> Turnos
	{
		get
		{
			return this._Turnos;
		}
		set
		{
			this._Turnos.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_Medico", Storage="_Usuario", ThisKey="ID_Usuario", OtherKey="ID_Usuario", IsForeignKey=true)]
	public Usuario Usuario
	{
		get
		{
			return this._Usuario.Entity;
		}
		set
		{
			Usuario previousValue = this._Usuario.Entity;
			if (((previousValue != value) 
						|| (this._Usuario.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Usuario.Entity = null;
					previousValue.Medicos.Remove(this);
				}
				this._Usuario.Entity = value;
				if ((value != null))
				{
					value.Medicos.Add(this);
					this._ID_Usuario = value.ID_Usuario;
				}
				else
				{
					this._ID_Usuario = default(Nullable<int>);
				}
				this.SendPropertyChanged("Usuario");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_MedicoEspecialidads(MedicoEspecialidad entity)
	{
		this.SendPropertyChanging();
		entity.Medico = this;
	}
	
	private void detach_MedicoEspecialidads(MedicoEspecialidad entity)
	{
		this.SendPropertyChanging();
		entity.Medico = null;
	}
	
	private void attach_MedicoServicios(MedicoServicio entity)
	{
		this.SendPropertyChanging();
		entity.Medico = this;
	}
	
	private void detach_MedicoServicios(MedicoServicio entity)
	{
		this.SendPropertyChanging();
		entity.Medico = null;
	}
	
	private void attach_Turnos(Turno entity)
	{
		this.SendPropertyChanging();
		entity.Medico = this;
	}
	
	private void detach_Turnos(Turno entity)
	{
		this.SendPropertyChanging();
		entity.Medico = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicoEspecialidad")]
public partial class MedicoEspecialidad : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_MedicoEspecialidad;
	
	private bool _Habilitado;
	
	private System.Nullable<int> _ID_Medico;
	
	private System.Nullable<int> _ID_Especialidad;
	
	private EntityRef<Especialidad> _Especialidad;
	
	private EntityRef<Medico> _Medico;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_MedicoEspecialidadChanging(int value);
    partial void OnID_MedicoEspecialidadChanged();
    partial void OnHabilitadoChanging(bool value);
    partial void OnHabilitadoChanged();
    partial void OnID_MedicoChanging(System.Nullable<int> value);
    partial void OnID_MedicoChanged();
    partial void OnID_EspecialidadChanging(System.Nullable<int> value);
    partial void OnID_EspecialidadChanged();
    #endregion
	
	public MedicoEspecialidad()
	{
		this._Especialidad = default(EntityRef<Especialidad>);
		this._Medico = default(EntityRef<Medico>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_MedicoEspecialidad", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_MedicoEspecialidad
	{
		get
		{
			return this._ID_MedicoEspecialidad;
		}
		set
		{
			if ((this._ID_MedicoEspecialidad != value))
			{
				this.OnID_MedicoEspecialidadChanging(value);
				this.SendPropertyChanging();
				this._ID_MedicoEspecialidad = value;
				this.SendPropertyChanged("ID_MedicoEspecialidad");
				this.OnID_MedicoEspecialidadChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Habilitado", DbType="Bit NOT NULL")]
	public bool Habilitado
	{
		get
		{
			return this._Habilitado;
		}
		set
		{
			if ((this._Habilitado != value))
			{
				this.OnHabilitadoChanging(value);
				this.SendPropertyChanging();
				this._Habilitado = value;
				this.SendPropertyChanged("Habilitado");
				this.OnHabilitadoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Medico", DbType="Int")]
	public System.Nullable<int> ID_Medico
	{
		get
		{
			return this._ID_Medico;
		}
		set
		{
			if ((this._ID_Medico != value))
			{
				if (this._Medico.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_MedicoChanging(value);
				this.SendPropertyChanging();
				this._ID_Medico = value;
				this.SendPropertyChanged("ID_Medico");
				this.OnID_MedicoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Especialidad", DbType="Int")]
	public System.Nullable<int> ID_Especialidad
	{
		get
		{
			return this._ID_Especialidad;
		}
		set
		{
			if ((this._ID_Especialidad != value))
			{
				if (this._Especialidad.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_EspecialidadChanging(value);
				this.SendPropertyChanging();
				this._ID_Especialidad = value;
				this.SendPropertyChanged("ID_Especialidad");
				this.OnID_EspecialidadChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Especialidad_MedicoEspecialidad", Storage="_Especialidad", ThisKey="ID_Especialidad", OtherKey="ID_Especialidad", IsForeignKey=true)]
	public Especialidad Especialidad
	{
		get
		{
			return this._Especialidad.Entity;
		}
		set
		{
			Especialidad previousValue = this._Especialidad.Entity;
			if (((previousValue != value) 
						|| (this._Especialidad.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Especialidad.Entity = null;
					previousValue.MedicoEspecialidads.Remove(this);
				}
				this._Especialidad.Entity = value;
				if ((value != null))
				{
					value.MedicoEspecialidads.Add(this);
					this._ID_Especialidad = value.ID_Especialidad;
				}
				else
				{
					this._ID_Especialidad = default(Nullable<int>);
				}
				this.SendPropertyChanged("Especialidad");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medico_MedicoEspecialidad", Storage="_Medico", ThisKey="ID_Medico", OtherKey="ID_Medico", IsForeignKey=true)]
	public Medico Medico
	{
		get
		{
			return this._Medico.Entity;
		}
		set
		{
			Medico previousValue = this._Medico.Entity;
			if (((previousValue != value) 
						|| (this._Medico.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Medico.Entity = null;
					previousValue.MedicoEspecialidads.Remove(this);
				}
				this._Medico.Entity = value;
				if ((value != null))
				{
					value.MedicoEspecialidads.Add(this);
					this._ID_Medico = value.ID_Medico;
				}
				else
				{
					this._ID_Medico = default(Nullable<int>);
				}
				this.SendPropertyChanged("Medico");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicoServicio")]
public partial class MedicoServicio : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_MedicoServicio;
	
	private bool _Habilitado;
	
	private int _ID_Medico;
	
	private int _ID_Servicio;
	
	private EntityRef<Medico> _Medico;
	
	private EntityRef<Servicio> _Servicio;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_MedicoServicioChanging(int value);
    partial void OnID_MedicoServicioChanged();
    partial void OnHabilitadoChanging(bool value);
    partial void OnHabilitadoChanged();
    partial void OnID_MedicoChanging(int value);
    partial void OnID_MedicoChanged();
    partial void OnID_ServicioChanging(int value);
    partial void OnID_ServicioChanged();
    #endregion
	
	public MedicoServicio()
	{
		this._Medico = default(EntityRef<Medico>);
		this._Servicio = default(EntityRef<Servicio>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_MedicoServicio", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_MedicoServicio
	{
		get
		{
			return this._ID_MedicoServicio;
		}
		set
		{
			if ((this._ID_MedicoServicio != value))
			{
				this.OnID_MedicoServicioChanging(value);
				this.SendPropertyChanging();
				this._ID_MedicoServicio = value;
				this.SendPropertyChanged("ID_MedicoServicio");
				this.OnID_MedicoServicioChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Habilitado", DbType="Bit NOT NULL")]
	public bool Habilitado
	{
		get
		{
			return this._Habilitado;
		}
		set
		{
			if ((this._Habilitado != value))
			{
				this.OnHabilitadoChanging(value);
				this.SendPropertyChanging();
				this._Habilitado = value;
				this.SendPropertyChanged("Habilitado");
				this.OnHabilitadoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Medico", DbType="Int NOT NULL")]
	public int ID_Medico
	{
		get
		{
			return this._ID_Medico;
		}
		set
		{
			if ((this._ID_Medico != value))
			{
				if (this._Medico.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_MedicoChanging(value);
				this.SendPropertyChanging();
				this._ID_Medico = value;
				this.SendPropertyChanged("ID_Medico");
				this.OnID_MedicoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Servicio", DbType="Int NOT NULL")]
	public int ID_Servicio
	{
		get
		{
			return this._ID_Servicio;
		}
		set
		{
			if ((this._ID_Servicio != value))
			{
				if (this._Servicio.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_ServicioChanging(value);
				this.SendPropertyChanging();
				this._ID_Servicio = value;
				this.SendPropertyChanged("ID_Servicio");
				this.OnID_ServicioChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medico_MedicoServicio", Storage="_Medico", ThisKey="ID_Medico", OtherKey="ID_Medico", IsForeignKey=true)]
	public Medico Medico
	{
		get
		{
			return this._Medico.Entity;
		}
		set
		{
			Medico previousValue = this._Medico.Entity;
			if (((previousValue != value) 
						|| (this._Medico.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Medico.Entity = null;
					previousValue.MedicoServicios.Remove(this);
				}
				this._Medico.Entity = value;
				if ((value != null))
				{
					value.MedicoServicios.Add(this);
					this._ID_Medico = value.ID_Medico;
				}
				else
				{
					this._ID_Medico = default(int);
				}
				this.SendPropertyChanged("Medico");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Servicio_MedicoServicio", Storage="_Servicio", ThisKey="ID_Servicio", OtherKey="ID_Servicio", IsForeignKey=true)]
	public Servicio Servicio
	{
		get
		{
			return this._Servicio.Entity;
		}
		set
		{
			Servicio previousValue = this._Servicio.Entity;
			if (((previousValue != value) 
						|| (this._Servicio.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Servicio.Entity = null;
					previousValue.MedicoServicios.Remove(this);
				}
				this._Servicio.Entity = value;
				if ((value != null))
				{
					value.MedicoServicios.Add(this);
					this._ID_Servicio = value.ID_Servicio;
				}
				else
				{
					this._ID_Servicio = default(int);
				}
				this.SendPropertyChanged("Servicio");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ObraSocial")]
public partial class ObraSocial : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_ObraSocial;
	
	private bool _Habilitado;
	
	private string _Nombre;
	
	private string _Direccion;
	
	private string _Localidad;
	
	private string _Telefono;
	
	private EntitySet<Plan> _Plans;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ObraSocialChanging(int value);
    partial void OnID_ObraSocialChanged();
    partial void OnHabilitadoChanging(bool value);
    partial void OnHabilitadoChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnDireccionChanging(string value);
    partial void OnDireccionChanged();
    partial void OnLocalidadChanging(string value);
    partial void OnLocalidadChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    #endregion
	
	public ObraSocial()
	{
		this._Plans = new EntitySet<Plan>(new Action<Plan>(this.attach_Plans), new Action<Plan>(this.detach_Plans));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_ObraSocial", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_ObraSocial
	{
		get
		{
			return this._ID_ObraSocial;
		}
		set
		{
			if ((this._ID_ObraSocial != value))
			{
				this.OnID_ObraSocialChanging(value);
				this.SendPropertyChanging();
				this._ID_ObraSocial = value;
				this.SendPropertyChanged("ID_ObraSocial");
				this.OnID_ObraSocialChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Habilitado", DbType="Bit NOT NULL")]
	public bool Habilitado
	{
		get
		{
			return this._Habilitado;
		}
		set
		{
			if ((this._Habilitado != value))
			{
				this.OnHabilitadoChanging(value);
				this.SendPropertyChanging();
				this._Habilitado = value;
				this.SendPropertyChanged("Habilitado");
				this.OnHabilitadoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string Nombre
	{
		get
		{
			return this._Nombre;
		}
		set
		{
			if ((this._Nombre != value))
			{
				this.OnNombreChanging(value);
				this.SendPropertyChanging();
				this._Nombre = value;
				this.SendPropertyChanged("Nombre");
				this.OnNombreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direccion", DbType="VarChar(100)")]
	public string Direccion
	{
		get
		{
			return this._Direccion;
		}
		set
		{
			if ((this._Direccion != value))
			{
				this.OnDireccionChanging(value);
				this.SendPropertyChanging();
				this._Direccion = value;
				this.SendPropertyChanged("Direccion");
				this.OnDireccionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Localidad", DbType="VarChar(30)")]
	public string Localidad
	{
		get
		{
			return this._Localidad;
		}
		set
		{
			if ((this._Localidad != value))
			{
				this.OnLocalidadChanging(value);
				this.SendPropertyChanging();
				this._Localidad = value;
				this.SendPropertyChanged("Localidad");
				this.OnLocalidadChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telefono", DbType="VarChar(15)")]
	public string Telefono
	{
		get
		{
			return this._Telefono;
		}
		set
		{
			if ((this._Telefono != value))
			{
				this.OnTelefonoChanging(value);
				this.SendPropertyChanging();
				this._Telefono = value;
				this.SendPropertyChanged("Telefono");
				this.OnTelefonoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObraSocial_Plan", Storage="_Plans", ThisKey="ID_ObraSocial", OtherKey="ID_ObraSocial")]
	public EntitySet<Plan> Plans
	{
		get
		{
			return this._Plans;
		}
		set
		{
			this._Plans.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Plans(Plan entity)
	{
		this.SendPropertyChanging();
		entity.ObraSocial = this;
	}
	
	private void detach_Plans(Plan entity)
	{
		this.SendPropertyChanging();
		entity.ObraSocial = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PacientePlan")]
public partial class PacientePlan : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_PacientePlan;
	
	private bool _Habilitado;
	
	private int _ID_Paciente;
	
	private System.Nullable<int> _ID_Plan;
	
	private string _Estado;
	
	private System.Nullable<System.DateTime> _FechaInicio;
	
	private System.Nullable<System.DateTime> _FechaFin;
	
	private EntityRef<Plan> _Plan;
	
	private EntityRef<Paciente> _Paciente;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_PacientePlanChanging(int value);
    partial void OnID_PacientePlanChanged();
    partial void OnHabilitadoChanging(bool value);
    partial void OnHabilitadoChanged();
    partial void OnID_PacienteChanging(int value);
    partial void OnID_PacienteChanged();
    partial void OnID_PlanChanging(System.Nullable<int> value);
    partial void OnID_PlanChanged();
    partial void OnEstadoChanging(string value);
    partial void OnEstadoChanged();
    partial void OnFechaInicioChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaInicioChanged();
    partial void OnFechaFinChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaFinChanged();
    #endregion
	
	public PacientePlan()
	{
		this._Plan = default(EntityRef<Plan>);
		this._Paciente = default(EntityRef<Paciente>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_PacientePlan", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_PacientePlan
	{
		get
		{
			return this._ID_PacientePlan;
		}
		set
		{
			if ((this._ID_PacientePlan != value))
			{
				this.OnID_PacientePlanChanging(value);
				this.SendPropertyChanging();
				this._ID_PacientePlan = value;
				this.SendPropertyChanged("ID_PacientePlan");
				this.OnID_PacientePlanChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Habilitado", DbType="Bit NOT NULL")]
	public bool Habilitado
	{
		get
		{
			return this._Habilitado;
		}
		set
		{
			if ((this._Habilitado != value))
			{
				this.OnHabilitadoChanging(value);
				this.SendPropertyChanging();
				this._Habilitado = value;
				this.SendPropertyChanged("Habilitado");
				this.OnHabilitadoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Paciente", DbType="Int NOT NULL")]
	public int ID_Paciente
	{
		get
		{
			return this._ID_Paciente;
		}
		set
		{
			if ((this._ID_Paciente != value))
			{
				if (this._Paciente.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_PacienteChanging(value);
				this.SendPropertyChanging();
				this._ID_Paciente = value;
				this.SendPropertyChanged("ID_Paciente");
				this.OnID_PacienteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Plan", DbType="Int")]
	public System.Nullable<int> ID_Plan
	{
		get
		{
			return this._ID_Plan;
		}
		set
		{
			if ((this._ID_Plan != value))
			{
				if (this._Plan.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_PlanChanging(value);
				this.SendPropertyChanging();
				this._ID_Plan = value;
				this.SendPropertyChanged("ID_Plan");
				this.OnID_PlanChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Estado", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Estado
	{
		get
		{
			return this._Estado;
		}
		set
		{
			if ((this._Estado != value))
			{
				this.OnEstadoChanging(value);
				this.SendPropertyChanging();
				this._Estado = value;
				this.SendPropertyChanged("Estado");
				this.OnEstadoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FechaInicio", DbType="DateTime")]
	public System.Nullable<System.DateTime> FechaInicio
	{
		get
		{
			return this._FechaInicio;
		}
		set
		{
			if ((this._FechaInicio != value))
			{
				this.OnFechaInicioChanging(value);
				this.SendPropertyChanging();
				this._FechaInicio = value;
				this.SendPropertyChanged("FechaInicio");
				this.OnFechaInicioChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FechaFin", DbType="DateTime")]
	public System.Nullable<System.DateTime> FechaFin
	{
		get
		{
			return this._FechaFin;
		}
		set
		{
			if ((this._FechaFin != value))
			{
				this.OnFechaFinChanging(value);
				this.SendPropertyChanging();
				this._FechaFin = value;
				this.SendPropertyChanged("FechaFin");
				this.OnFechaFinChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plan_PacientePlan", Storage="_Plan", ThisKey="ID_Plan", OtherKey="ID_Plan", IsForeignKey=true)]
	public Plan Plan
	{
		get
		{
			return this._Plan.Entity;
		}
		set
		{
			Plan previousValue = this._Plan.Entity;
			if (((previousValue != value) 
						|| (this._Plan.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Plan.Entity = null;
					previousValue.PacientePlans.Remove(this);
				}
				this._Plan.Entity = value;
				if ((value != null))
				{
					value.PacientePlans.Add(this);
					this._ID_Plan = value.ID_Plan;
				}
				else
				{
					this._ID_Plan = default(Nullable<int>);
				}
				this.SendPropertyChanged("Plan");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_PacientePlan", Storage="_Paciente", ThisKey="ID_Paciente", OtherKey="ID_Paciente", IsForeignKey=true)]
	public Paciente Paciente
	{
		get
		{
			return this._Paciente.Entity;
		}
		set
		{
			Paciente previousValue = this._Paciente.Entity;
			if (((previousValue != value) 
						|| (this._Paciente.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Paciente.Entity = null;
					previousValue.PacientePlans.Remove(this);
				}
				this._Paciente.Entity = value;
				if ((value != null))
				{
					value.PacientePlans.Add(this);
					this._ID_Paciente = value.ID_Paciente;
				}
				else
				{
					this._ID_Paciente = default(int);
				}
				this.SendPropertyChanged("Paciente");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Plan]")]
public partial class Plan : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Plan;
	
	private bool _Habilitado;
	
	private string _Denominacion;
	
	private System.Nullable<double> _Descuento;
	
	private System.Nullable<int> _ID_ObraSocial;
	
	private EntitySet<PacientePlan> _PacientePlans;
	
	private EntityRef<ObraSocial> _ObraSocial;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_PlanChanging(int value);
    partial void OnID_PlanChanged();
    partial void OnHabilitadoChanging(bool value);
    partial void OnHabilitadoChanged();
    partial void OnDenominacionChanging(string value);
    partial void OnDenominacionChanged();
    partial void OnDescuentoChanging(System.Nullable<double> value);
    partial void OnDescuentoChanged();
    partial void OnID_ObraSocialChanging(System.Nullable<int> value);
    partial void OnID_ObraSocialChanged();
    #endregion
	
	public Plan()
	{
		this._PacientePlans = new EntitySet<PacientePlan>(new Action<PacientePlan>(this.attach_PacientePlans), new Action<PacientePlan>(this.detach_PacientePlans));
		this._ObraSocial = default(EntityRef<ObraSocial>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Plan", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_Plan
	{
		get
		{
			return this._ID_Plan;
		}
		set
		{
			if ((this._ID_Plan != value))
			{
				this.OnID_PlanChanging(value);
				this.SendPropertyChanging();
				this._ID_Plan = value;
				this.SendPropertyChanged("ID_Plan");
				this.OnID_PlanChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Habilitado", DbType="Bit NOT NULL")]
	public bool Habilitado
	{
		get
		{
			return this._Habilitado;
		}
		set
		{
			if ((this._Habilitado != value))
			{
				this.OnHabilitadoChanging(value);
				this.SendPropertyChanging();
				this._Habilitado = value;
				this.SendPropertyChanged("Habilitado");
				this.OnHabilitadoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Denominacion", DbType="VarChar(50)")]
	public string Denominacion
	{
		get
		{
			return this._Denominacion;
		}
		set
		{
			if ((this._Denominacion != value))
			{
				this.OnDenominacionChanging(value);
				this.SendPropertyChanging();
				this._Denominacion = value;
				this.SendPropertyChanged("Denominacion");
				this.OnDenominacionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descuento", DbType="Float")]
	public System.Nullable<double> Descuento
	{
		get
		{
			return this._Descuento;
		}
		set
		{
			if ((this._Descuento != value))
			{
				this.OnDescuentoChanging(value);
				this.SendPropertyChanging();
				this._Descuento = value;
				this.SendPropertyChanged("Descuento");
				this.OnDescuentoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_ObraSocial", DbType="Int")]
	public System.Nullable<int> ID_ObraSocial
	{
		get
		{
			return this._ID_ObraSocial;
		}
		set
		{
			if ((this._ID_ObraSocial != value))
			{
				if (this._ObraSocial.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_ObraSocialChanging(value);
				this.SendPropertyChanging();
				this._ID_ObraSocial = value;
				this.SendPropertyChanged("ID_ObraSocial");
				this.OnID_ObraSocialChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plan_PacientePlan", Storage="_PacientePlans", ThisKey="ID_Plan", OtherKey="ID_Plan")]
	public EntitySet<PacientePlan> PacientePlans
	{
		get
		{
			return this._PacientePlans;
		}
		set
		{
			this._PacientePlans.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObraSocial_Plan", Storage="_ObraSocial", ThisKey="ID_ObraSocial", OtherKey="ID_ObraSocial", IsForeignKey=true)]
	public ObraSocial ObraSocial
	{
		get
		{
			return this._ObraSocial.Entity;
		}
		set
		{
			ObraSocial previousValue = this._ObraSocial.Entity;
			if (((previousValue != value) 
						|| (this._ObraSocial.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ObraSocial.Entity = null;
					previousValue.Plans.Remove(this);
				}
				this._ObraSocial.Entity = value;
				if ((value != null))
				{
					value.Plans.Add(this);
					this._ID_ObraSocial = value.ID_ObraSocial;
				}
				else
				{
					this._ID_ObraSocial = default(Nullable<int>);
				}
				this.SendPropertyChanged("ObraSocial");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PacientePlans(PacientePlan entity)
	{
		this.SendPropertyChanging();
		entity.Plan = this;
	}
	
	private void detach_PacientePlans(PacientePlan entity)
	{
		this.SendPropertyChanging();
		entity.Plan = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Servicio")]
public partial class Servicio : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Servicio;
	
	private bool _Habilitado;
	
	private string _Denominacion;
	
	private System.Nullable<double> _Precio;
	
	private EntitySet<FacturaDetalle> _FacturaDetalles;
	
	private EntitySet<MedicoServicio> _MedicoServicios;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ServicioChanging(int value);
    partial void OnID_ServicioChanged();
    partial void OnHabilitadoChanging(bool value);
    partial void OnHabilitadoChanged();
    partial void OnDenominacionChanging(string value);
    partial void OnDenominacionChanged();
    partial void OnPrecioChanging(System.Nullable<double> value);
    partial void OnPrecioChanged();
    #endregion
	
	public Servicio()
	{
		this._FacturaDetalles = new EntitySet<FacturaDetalle>(new Action<FacturaDetalle>(this.attach_FacturaDetalles), new Action<FacturaDetalle>(this.detach_FacturaDetalles));
		this._MedicoServicios = new EntitySet<MedicoServicio>(new Action<MedicoServicio>(this.attach_MedicoServicios), new Action<MedicoServicio>(this.detach_MedicoServicios));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Servicio", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_Servicio
	{
		get
		{
			return this._ID_Servicio;
		}
		set
		{
			if ((this._ID_Servicio != value))
			{
				this.OnID_ServicioChanging(value);
				this.SendPropertyChanging();
				this._ID_Servicio = value;
				this.SendPropertyChanged("ID_Servicio");
				this.OnID_ServicioChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Habilitado", DbType="Bit NOT NULL")]
	public bool Habilitado
	{
		get
		{
			return this._Habilitado;
		}
		set
		{
			if ((this._Habilitado != value))
			{
				this.OnHabilitadoChanging(value);
				this.SendPropertyChanging();
				this._Habilitado = value;
				this.SendPropertyChanged("Habilitado");
				this.OnHabilitadoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Denominacion", DbType="VarChar(50)")]
	public string Denominacion
	{
		get
		{
			return this._Denominacion;
		}
		set
		{
			if ((this._Denominacion != value))
			{
				this.OnDenominacionChanging(value);
				this.SendPropertyChanging();
				this._Denominacion = value;
				this.SendPropertyChanged("Denominacion");
				this.OnDenominacionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precio", DbType="Float")]
	public System.Nullable<double> Precio
	{
		get
		{
			return this._Precio;
		}
		set
		{
			if ((this._Precio != value))
			{
				this.OnPrecioChanging(value);
				this.SendPropertyChanging();
				this._Precio = value;
				this.SendPropertyChanged("Precio");
				this.OnPrecioChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Servicio_FacturaDetalle", Storage="_FacturaDetalles", ThisKey="ID_Servicio", OtherKey="ID_Servicio")]
	public EntitySet<FacturaDetalle> FacturaDetalles
	{
		get
		{
			return this._FacturaDetalles;
		}
		set
		{
			this._FacturaDetalles.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Servicio_MedicoServicio", Storage="_MedicoServicios", ThisKey="ID_Servicio", OtherKey="ID_Servicio")]
	public EntitySet<MedicoServicio> MedicoServicios
	{
		get
		{
			return this._MedicoServicios;
		}
		set
		{
			this._MedicoServicios.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_FacturaDetalles(FacturaDetalle entity)
	{
		this.SendPropertyChanging();
		entity.Servicio = this;
	}
	
	private void detach_FacturaDetalles(FacturaDetalle entity)
	{
		this.SendPropertyChanging();
		entity.Servicio = null;
	}
	
	private void attach_MedicoServicios(MedicoServicio entity)
	{
		this.SendPropertyChanging();
		entity.Servicio = this;
	}
	
	private void detach_MedicoServicios(MedicoServicio entity)
	{
		this.SendPropertyChanging();
		entity.Servicio = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TipoUsuario")]
public partial class TipoUsuario : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_TipoUsuario;
	
	private bool _Habilitado;
	
	private string _Denominacion;
	
	private EntitySet<Usuario> _Usuarios;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_TipoUsuarioChanging(int value);
    partial void OnID_TipoUsuarioChanged();
    partial void OnHabilitadoChanging(bool value);
    partial void OnHabilitadoChanged();
    partial void OnDenominacionChanging(string value);
    partial void OnDenominacionChanged();
    #endregion
	
	public TipoUsuario()
	{
		this._Usuarios = new EntitySet<Usuario>(new Action<Usuario>(this.attach_Usuarios), new Action<Usuario>(this.detach_Usuarios));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_TipoUsuario", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_TipoUsuario
	{
		get
		{
			return this._ID_TipoUsuario;
		}
		set
		{
			if ((this._ID_TipoUsuario != value))
			{
				this.OnID_TipoUsuarioChanging(value);
				this.SendPropertyChanging();
				this._ID_TipoUsuario = value;
				this.SendPropertyChanged("ID_TipoUsuario");
				this.OnID_TipoUsuarioChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Habilitado", DbType="Bit NOT NULL")]
	public bool Habilitado
	{
		get
		{
			return this._Habilitado;
		}
		set
		{
			if ((this._Habilitado != value))
			{
				this.OnHabilitadoChanging(value);
				this.SendPropertyChanging();
				this._Habilitado = value;
				this.SendPropertyChanged("Habilitado");
				this.OnHabilitadoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Denominacion", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string Denominacion
	{
		get
		{
			return this._Denominacion;
		}
		set
		{
			if ((this._Denominacion != value))
			{
				this.OnDenominacionChanging(value);
				this.SendPropertyChanging();
				this._Denominacion = value;
				this.SendPropertyChanged("Denominacion");
				this.OnDenominacionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoUsuario_Usuario", Storage="_Usuarios", ThisKey="ID_TipoUsuario", OtherKey="ID_TipoUsuario")]
	public EntitySet<Usuario> Usuarios
	{
		get
		{
			return this._Usuarios;
		}
		set
		{
			this._Usuarios.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Usuarios(Usuario entity)
	{
		this.SendPropertyChanging();
		entity.TipoUsuario = this;
	}
	
	private void detach_Usuarios(Usuario entity)
	{
		this.SendPropertyChanging();
		entity.TipoUsuario = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HistoriaClinica")]
public partial class HistoriaClinica : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_HistoriaClinica;
	
	private string _GrupoSanguineo;
	
	private string _AntecedentesFamiliares;
	
	private string _Alergias;
	
	private string _Enfermedades;
	
	private EntitySet<Paciente> _Pacientes;
	
	private EntitySet<ConsultaHistoriaClinica> _ConsultaHistoriaClinicas;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_HistoriaClinicaChanging(int value);
    partial void OnID_HistoriaClinicaChanged();
    partial void OnGrupoSanguineoChanging(string value);
    partial void OnGrupoSanguineoChanged();
    partial void OnAntecedentesFamiliaresChanging(string value);
    partial void OnAntecedentesFamiliaresChanged();
    partial void OnAlergiasChanging(string value);
    partial void OnAlergiasChanged();
    partial void OnEnfermedadesChanging(string value);
    partial void OnEnfermedadesChanged();
    #endregion
	
	public HistoriaClinica()
	{
		this._Pacientes = new EntitySet<Paciente>(new Action<Paciente>(this.attach_Pacientes), new Action<Paciente>(this.detach_Pacientes));
		this._ConsultaHistoriaClinicas = new EntitySet<ConsultaHistoriaClinica>(new Action<ConsultaHistoriaClinica>(this.attach_ConsultaHistoriaClinicas), new Action<ConsultaHistoriaClinica>(this.detach_ConsultaHistoriaClinicas));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_HistoriaClinica", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_HistoriaClinica
	{
		get
		{
			return this._ID_HistoriaClinica;
		}
		set
		{
			if ((this._ID_HistoriaClinica != value))
			{
				this.OnID_HistoriaClinicaChanging(value);
				this.SendPropertyChanging();
				this._ID_HistoriaClinica = value;
				this.SendPropertyChanged("ID_HistoriaClinica");
				this.OnID_HistoriaClinicaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrupoSanguineo", DbType="NChar(10)")]
	public string GrupoSanguineo
	{
		get
		{
			return this._GrupoSanguineo;
		}
		set
		{
			if ((this._GrupoSanguineo != value))
			{
				this.OnGrupoSanguineoChanging(value);
				this.SendPropertyChanging();
				this._GrupoSanguineo = value;
				this.SendPropertyChanged("GrupoSanguineo");
				this.OnGrupoSanguineoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AntecedentesFamiliares", DbType="NChar(50)")]
	public string AntecedentesFamiliares
	{
		get
		{
			return this._AntecedentesFamiliares;
		}
		set
		{
			if ((this._AntecedentesFamiliares != value))
			{
				this.OnAntecedentesFamiliaresChanging(value);
				this.SendPropertyChanging();
				this._AntecedentesFamiliares = value;
				this.SendPropertyChanged("AntecedentesFamiliares");
				this.OnAntecedentesFamiliaresChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alergias", DbType="NChar(50)")]
	public string Alergias
	{
		get
		{
			return this._Alergias;
		}
		set
		{
			if ((this._Alergias != value))
			{
				this.OnAlergiasChanging(value);
				this.SendPropertyChanging();
				this._Alergias = value;
				this.SendPropertyChanged("Alergias");
				this.OnAlergiasChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enfermedades", DbType="NChar(30)")]
	public string Enfermedades
	{
		get
		{
			return this._Enfermedades;
		}
		set
		{
			if ((this._Enfermedades != value))
			{
				this.OnEnfermedadesChanging(value);
				this.SendPropertyChanging();
				this._Enfermedades = value;
				this.SendPropertyChanged("Enfermedades");
				this.OnEnfermedadesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HistoriaClinica_Paciente", Storage="_Pacientes", ThisKey="ID_HistoriaClinica", OtherKey="ID_HistoriaClinica")]
	public EntitySet<Paciente> Pacientes
	{
		get
		{
			return this._Pacientes;
		}
		set
		{
			this._Pacientes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HistoriaClinica_ConsultaHistoriaClinica", Storage="_ConsultaHistoriaClinicas", ThisKey="ID_HistoriaClinica", OtherKey="ID_HistoriaClinica")]
	public EntitySet<ConsultaHistoriaClinica> ConsultaHistoriaClinicas
	{
		get
		{
			return this._ConsultaHistoriaClinicas;
		}
		set
		{
			this._ConsultaHistoriaClinicas.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Pacientes(Paciente entity)
	{
		this.SendPropertyChanging();
		entity.HistoriaClinica = this;
	}
	
	private void detach_Pacientes(Paciente entity)
	{
		this.SendPropertyChanging();
		entity.HistoriaClinica = null;
	}
	
	private void attach_ConsultaHistoriaClinicas(ConsultaHistoriaClinica entity)
	{
		this.SendPropertyChanging();
		entity.HistoriaClinica = this;
	}
	
	private void detach_ConsultaHistoriaClinicas(ConsultaHistoriaClinica entity)
	{
		this.SendPropertyChanging();
		entity.HistoriaClinica = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Paciente")]
public partial class Paciente : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Paciente;
	
	private string _Nombre;
	
	private string _Apellido;
	
	private System.Nullable<char> _Sexo;
	
	private System.Nullable<int> _Dni;
	
	private System.Nullable<System.DateTime> _FechaNacimiento;
	
	private System.Nullable<char> _EstadoCivil;
	
	private string _Domicilio;
	
	private string _Localidad;
	
	private string _Telefono;
	
	private string _Email;
	
	private string _Ocupacion;
	
	private System.Nullable<int> _ID_HistoriaClinica;
	
	private EntitySet<Factura> _Facturas;
	
	private EntitySet<PacientePlan> _PacientePlans;
	
	private EntitySet<Turno> _Turnos;
	
	private EntityRef<HistoriaClinica> _HistoriaClinica;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_PacienteChanging(int value);
    partial void OnID_PacienteChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnApellidoChanging(string value);
    partial void OnApellidoChanged();
    partial void OnSexoChanging(System.Nullable<char> value);
    partial void OnSexoChanged();
    partial void OnDniChanging(System.Nullable<int> value);
    partial void OnDniChanged();
    partial void OnFechaNacimientoChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaNacimientoChanged();
    partial void OnEstadoCivilChanging(System.Nullable<char> value);
    partial void OnEstadoCivilChanged();
    partial void OnDomicilioChanging(string value);
    partial void OnDomicilioChanged();
    partial void OnLocalidadChanging(string value);
    partial void OnLocalidadChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnOcupacionChanging(string value);
    partial void OnOcupacionChanged();
    partial void OnID_HistoriaClinicaChanging(System.Nullable<int> value);
    partial void OnID_HistoriaClinicaChanged();
    #endregion
	
	public Paciente()
	{
		this._Facturas = new EntitySet<Factura>(new Action<Factura>(this.attach_Facturas), new Action<Factura>(this.detach_Facturas));
		this._PacientePlans = new EntitySet<PacientePlan>(new Action<PacientePlan>(this.attach_PacientePlans), new Action<PacientePlan>(this.detach_PacientePlans));
		this._Turnos = new EntitySet<Turno>(new Action<Turno>(this.attach_Turnos), new Action<Turno>(this.detach_Turnos));
		this._HistoriaClinica = default(EntityRef<HistoriaClinica>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Paciente", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_Paciente
	{
		get
		{
			return this._ID_Paciente;
		}
		set
		{
			if ((this._ID_Paciente != value))
			{
				this.OnID_PacienteChanging(value);
				this.SendPropertyChanging();
				this._ID_Paciente = value;
				this.SendPropertyChanged("ID_Paciente");
				this.OnID_PacienteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Nombre
	{
		get
		{
			return this._Nombre;
		}
		set
		{
			if ((this._Nombre != value))
			{
				this.OnNombreChanging(value);
				this.SendPropertyChanging();
				this._Nombre = value;
				this.SendPropertyChanged("Nombre");
				this.OnNombreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apellido", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
	public string Apellido
	{
		get
		{
			return this._Apellido;
		}
		set
		{
			if ((this._Apellido != value))
			{
				this.OnApellidoChanging(value);
				this.SendPropertyChanging();
				this._Apellido = value;
				this.SendPropertyChanged("Apellido");
				this.OnApellidoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sexo", DbType="Char(1)")]
	public System.Nullable<char> Sexo
	{
		get
		{
			return this._Sexo;
		}
		set
		{
			if ((this._Sexo != value))
			{
				this.OnSexoChanging(value);
				this.SendPropertyChanging();
				this._Sexo = value;
				this.SendPropertyChanged("Sexo");
				this.OnSexoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dni", DbType="Int")]
	public System.Nullable<int> Dni
	{
		get
		{
			return this._Dni;
		}
		set
		{
			if ((this._Dni != value))
			{
				this.OnDniChanging(value);
				this.SendPropertyChanging();
				this._Dni = value;
				this.SendPropertyChanged("Dni");
				this.OnDniChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FechaNacimiento", DbType="Date")]
	public System.Nullable<System.DateTime> FechaNacimiento
	{
		get
		{
			return this._FechaNacimiento;
		}
		set
		{
			if ((this._FechaNacimiento != value))
			{
				this.OnFechaNacimientoChanging(value);
				this.SendPropertyChanging();
				this._FechaNacimiento = value;
				this.SendPropertyChanged("FechaNacimiento");
				this.OnFechaNacimientoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstadoCivil", DbType="Char(1)")]
	public System.Nullable<char> EstadoCivil
	{
		get
		{
			return this._EstadoCivil;
		}
		set
		{
			if ((this._EstadoCivil != value))
			{
				this.OnEstadoCivilChanging(value);
				this.SendPropertyChanging();
				this._EstadoCivil = value;
				this.SendPropertyChanged("EstadoCivil");
				this.OnEstadoCivilChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Domicilio", DbType="NChar(50)")]
	public string Domicilio
	{
		get
		{
			return this._Domicilio;
		}
		set
		{
			if ((this._Domicilio != value))
			{
				this.OnDomicilioChanging(value);
				this.SendPropertyChanging();
				this._Domicilio = value;
				this.SendPropertyChanged("Domicilio");
				this.OnDomicilioChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Localidad", DbType="NChar(20)")]
	public string Localidad
	{
		get
		{
			return this._Localidad;
		}
		set
		{
			if ((this._Localidad != value))
			{
				this.OnLocalidadChanging(value);
				this.SendPropertyChanging();
				this._Localidad = value;
				this.SendPropertyChanged("Localidad");
				this.OnLocalidadChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telefono", DbType="NChar(10)")]
	public string Telefono
	{
		get
		{
			return this._Telefono;
		}
		set
		{
			if ((this._Telefono != value))
			{
				this.OnTelefonoChanging(value);
				this.SendPropertyChanging();
				this._Telefono = value;
				this.SendPropertyChanged("Telefono");
				this.OnTelefonoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ocupacion", DbType="NChar(25)")]
	public string Ocupacion
	{
		get
		{
			return this._Ocupacion;
		}
		set
		{
			if ((this._Ocupacion != value))
			{
				this.OnOcupacionChanging(value);
				this.SendPropertyChanging();
				this._Ocupacion = value;
				this.SendPropertyChanged("Ocupacion");
				this.OnOcupacionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_HistoriaClinica", DbType="Int")]
	public System.Nullable<int> ID_HistoriaClinica
	{
		get
		{
			return this._ID_HistoriaClinica;
		}
		set
		{
			if ((this._ID_HistoriaClinica != value))
			{
				if (this._HistoriaClinica.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_HistoriaClinicaChanging(value);
				this.SendPropertyChanging();
				this._ID_HistoriaClinica = value;
				this.SendPropertyChanged("ID_HistoriaClinica");
				this.OnID_HistoriaClinicaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_Factura", Storage="_Facturas", ThisKey="ID_Paciente", OtherKey="ID_Paciente")]
	public EntitySet<Factura> Facturas
	{
		get
		{
			return this._Facturas;
		}
		set
		{
			this._Facturas.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_PacientePlan", Storage="_PacientePlans", ThisKey="ID_Paciente", OtherKey="ID_Paciente")]
	public EntitySet<PacientePlan> PacientePlans
	{
		get
		{
			return this._PacientePlans;
		}
		set
		{
			this._PacientePlans.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_Turno", Storage="_Turnos", ThisKey="ID_Paciente", OtherKey="ID_Paciente")]
	public EntitySet<Turno> Turnos
	{
		get
		{
			return this._Turnos;
		}
		set
		{
			this._Turnos.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HistoriaClinica_Paciente", Storage="_HistoriaClinica", ThisKey="ID_HistoriaClinica", OtherKey="ID_HistoriaClinica", IsForeignKey=true)]
	public HistoriaClinica HistoriaClinica
	{
		get
		{
			return this._HistoriaClinica.Entity;
		}
		set
		{
			HistoriaClinica previousValue = this._HistoriaClinica.Entity;
			if (((previousValue != value) 
						|| (this._HistoriaClinica.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._HistoriaClinica.Entity = null;
					previousValue.Pacientes.Remove(this);
				}
				this._HistoriaClinica.Entity = value;
				if ((value != null))
				{
					value.Pacientes.Add(this);
					this._ID_HistoriaClinica = value.ID_HistoriaClinica;
				}
				else
				{
					this._ID_HistoriaClinica = default(Nullable<int>);
				}
				this.SendPropertyChanged("HistoriaClinica");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Facturas(Factura entity)
	{
		this.SendPropertyChanging();
		entity.Paciente = this;
	}
	
	private void detach_Facturas(Factura entity)
	{
		this.SendPropertyChanging();
		entity.Paciente = null;
	}
	
	private void attach_PacientePlans(PacientePlan entity)
	{
		this.SendPropertyChanging();
		entity.Paciente = this;
	}
	
	private void detach_PacientePlans(PacientePlan entity)
	{
		this.SendPropertyChanging();
		entity.Paciente = null;
	}
	
	private void attach_Turnos(Turno entity)
	{
		this.SendPropertyChanging();
		entity.Paciente = this;
	}
	
	private void detach_Turnos(Turno entity)
	{
		this.SendPropertyChanging();
		entity.Paciente = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Turno")]
public partial class Turno : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Turno;
	
	private System.DateTime _FechaHora;
	
	private string _Estado;
	
	private System.Nullable<int> _ID_Paciente;
	
	private System.Nullable<int> _ID_Medico;
	
	private EntityRef<Medico> _Medico;
	
	private EntityRef<Paciente> _Paciente;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_TurnoChanging(int value);
    partial void OnID_TurnoChanged();
    partial void OnFechaHoraChanging(System.DateTime value);
    partial void OnFechaHoraChanged();
    partial void OnEstadoChanging(string value);
    partial void OnEstadoChanged();
    partial void OnID_PacienteChanging(System.Nullable<int> value);
    partial void OnID_PacienteChanged();
    partial void OnID_MedicoChanging(System.Nullable<int> value);
    partial void OnID_MedicoChanged();
    #endregion
	
	public Turno()
	{
		this._Medico = default(EntityRef<Medico>);
		this._Paciente = default(EntityRef<Paciente>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Turno", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_Turno
	{
		get
		{
			return this._ID_Turno;
		}
		set
		{
			if ((this._ID_Turno != value))
			{
				this.OnID_TurnoChanging(value);
				this.SendPropertyChanging();
				this._ID_Turno = value;
				this.SendPropertyChanged("ID_Turno");
				this.OnID_TurnoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FechaHora", DbType="DateTime NOT NULL")]
	public System.DateTime FechaHora
	{
		get
		{
			return this._FechaHora;
		}
		set
		{
			if ((this._FechaHora != value))
			{
				this.OnFechaHoraChanging(value);
				this.SendPropertyChanging();
				this._FechaHora = value;
				this.SendPropertyChanged("FechaHora");
				this.OnFechaHoraChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Estado", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string Estado
	{
		get
		{
			return this._Estado;
		}
		set
		{
			if ((this._Estado != value))
			{
				this.OnEstadoChanging(value);
				this.SendPropertyChanging();
				this._Estado = value;
				this.SendPropertyChanged("Estado");
				this.OnEstadoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Paciente", DbType="Int")]
	public System.Nullable<int> ID_Paciente
	{
		get
		{
			return this._ID_Paciente;
		}
		set
		{
			if ((this._ID_Paciente != value))
			{
				if (this._Paciente.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_PacienteChanging(value);
				this.SendPropertyChanging();
				this._ID_Paciente = value;
				this.SendPropertyChanged("ID_Paciente");
				this.OnID_PacienteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Medico", DbType="Int")]
	public System.Nullable<int> ID_Medico
	{
		get
		{
			return this._ID_Medico;
		}
		set
		{
			if ((this._ID_Medico != value))
			{
				if (this._Medico.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_MedicoChanging(value);
				this.SendPropertyChanging();
				this._ID_Medico = value;
				this.SendPropertyChanged("ID_Medico");
				this.OnID_MedicoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medico_Turno", Storage="_Medico", ThisKey="ID_Medico", OtherKey="ID_Medico", IsForeignKey=true)]
	public Medico Medico
	{
		get
		{
			return this._Medico.Entity;
		}
		set
		{
			Medico previousValue = this._Medico.Entity;
			if (((previousValue != value) 
						|| (this._Medico.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Medico.Entity = null;
					previousValue.Turnos.Remove(this);
				}
				this._Medico.Entity = value;
				if ((value != null))
				{
					value.Turnos.Add(this);
					this._ID_Medico = value.ID_Medico;
				}
				else
				{
					this._ID_Medico = default(Nullable<int>);
				}
				this.SendPropertyChanged("Medico");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_Turno", Storage="_Paciente", ThisKey="ID_Paciente", OtherKey="ID_Paciente", IsForeignKey=true)]
	public Paciente Paciente
	{
		get
		{
			return this._Paciente.Entity;
		}
		set
		{
			Paciente previousValue = this._Paciente.Entity;
			if (((previousValue != value) 
						|| (this._Paciente.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Paciente.Entity = null;
					previousValue.Turnos.Remove(this);
				}
				this._Paciente.Entity = value;
				if ((value != null))
				{
					value.Turnos.Add(this);
					this._ID_Paciente = value.ID_Paciente;
				}
				else
				{
					this._ID_Paciente = default(Nullable<int>);
				}
				this.SendPropertyChanged("Paciente");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConsultaHistoriaClinica")]
public partial class ConsultaHistoriaClinica : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_ConsultaHistoriaClinica;
	
	private int _ID_HistoriaClinica;
	
	private decimal _Peso;
	
	private decimal _Altura;
	
	private string _Sintomas;
	
	private string _DiagnosticoPresunto;
	
	private string _PedidoEstudio;
	
	private string _Derivaciones;
	
	private string _Tratamiento;
	
	private string _Receta;
	
	private System.DateTime _ProximoControl;
	
	private byte _Alta;
	
	private EntityRef<HistoriaClinica> _HistoriaClinica;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ConsultaHistoriaClinicaChanging(int value);
    partial void OnID_ConsultaHistoriaClinicaChanged();
    partial void OnID_HistoriaClinicaChanging(int value);
    partial void OnID_HistoriaClinicaChanged();
    partial void OnPesoChanging(decimal value);
    partial void OnPesoChanged();
    partial void OnAlturaChanging(decimal value);
    partial void OnAlturaChanged();
    partial void OnSintomasChanging(string value);
    partial void OnSintomasChanged();
    partial void OnDiagnosticoPresuntoChanging(string value);
    partial void OnDiagnosticoPresuntoChanged();
    partial void OnPedidoEstudioChanging(string value);
    partial void OnPedidoEstudioChanged();
    partial void OnDerivacionesChanging(string value);
    partial void OnDerivacionesChanged();
    partial void OnTratamientoChanging(string value);
    partial void OnTratamientoChanged();
    partial void OnRecetaChanging(string value);
    partial void OnRecetaChanged();
    partial void OnProximoControlChanging(System.DateTime value);
    partial void OnProximoControlChanged();
    partial void OnAltaChanging(byte value);
    partial void OnAltaChanged();
    #endregion
	
	public ConsultaHistoriaClinica()
	{
		this._HistoriaClinica = default(EntityRef<HistoriaClinica>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_ConsultaHistoriaClinica", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID_ConsultaHistoriaClinica
	{
		get
		{
			return this._ID_ConsultaHistoriaClinica;
		}
		set
		{
			if ((this._ID_ConsultaHistoriaClinica != value))
			{
				this.OnID_ConsultaHistoriaClinicaChanging(value);
				this.SendPropertyChanging();
				this._ID_ConsultaHistoriaClinica = value;
				this.SendPropertyChanged("ID_ConsultaHistoriaClinica");
				this.OnID_ConsultaHistoriaClinicaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_HistoriaClinica", DbType="Int NOT NULL")]
	public int ID_HistoriaClinica
	{
		get
		{
			return this._ID_HistoriaClinica;
		}
		set
		{
			if ((this._ID_HistoriaClinica != value))
			{
				if (this._HistoriaClinica.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_HistoriaClinicaChanging(value);
				this.SendPropertyChanging();
				this._ID_HistoriaClinica = value;
				this.SendPropertyChanged("ID_HistoriaClinica");
				this.OnID_HistoriaClinicaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Peso", DbType="Decimal(6,3) NOT NULL")]
	public decimal Peso
	{
		get
		{
			return this._Peso;
		}
		set
		{
			if ((this._Peso != value))
			{
				this.OnPesoChanging(value);
				this.SendPropertyChanging();
				this._Peso = value;
				this.SendPropertyChanged("Peso");
				this.OnPesoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Altura", DbType="Decimal(3,2) NOT NULL")]
	public decimal Altura
	{
		get
		{
			return this._Altura;
		}
		set
		{
			if ((this._Altura != value))
			{
				this.OnAlturaChanging(value);
				this.SendPropertyChanging();
				this._Altura = value;
				this.SendPropertyChanged("Altura");
				this.OnAlturaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sintomas", DbType="NChar(10)")]
	public string Sintomas
	{
		get
		{
			return this._Sintomas;
		}
		set
		{
			if ((this._Sintomas != value))
			{
				this.OnSintomasChanging(value);
				this.SendPropertyChanging();
				this._Sintomas = value;
				this.SendPropertyChanged("Sintomas");
				this.OnSintomasChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiagnosticoPresunto", DbType="NChar(10)")]
	public string DiagnosticoPresunto
	{
		get
		{
			return this._DiagnosticoPresunto;
		}
		set
		{
			if ((this._DiagnosticoPresunto != value))
			{
				this.OnDiagnosticoPresuntoChanging(value);
				this.SendPropertyChanging();
				this._DiagnosticoPresunto = value;
				this.SendPropertyChanged("DiagnosticoPresunto");
				this.OnDiagnosticoPresuntoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PedidoEstudio", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string PedidoEstudio
	{
		get
		{
			return this._PedidoEstudio;
		}
		set
		{
			if ((this._PedidoEstudio != value))
			{
				this.OnPedidoEstudioChanging(value);
				this.SendPropertyChanging();
				this._PedidoEstudio = value;
				this.SendPropertyChanged("PedidoEstudio");
				this.OnPedidoEstudioChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Derivaciones", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string Derivaciones
	{
		get
		{
			return this._Derivaciones;
		}
		set
		{
			if ((this._Derivaciones != value))
			{
				this.OnDerivacionesChanging(value);
				this.SendPropertyChanging();
				this._Derivaciones = value;
				this.SendPropertyChanged("Derivaciones");
				this.OnDerivacionesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tratamiento", DbType="NChar(10)")]
	public string Tratamiento
	{
		get
		{
			return this._Tratamiento;
		}
		set
		{
			if ((this._Tratamiento != value))
			{
				this.OnTratamientoChanging(value);
				this.SendPropertyChanging();
				this._Tratamiento = value;
				this.SendPropertyChanged("Tratamiento");
				this.OnTratamientoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Receta", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string Receta
	{
		get
		{
			return this._Receta;
		}
		set
		{
			if ((this._Receta != value))
			{
				this.OnRecetaChanging(value);
				this.SendPropertyChanging();
				this._Receta = value;
				this.SendPropertyChanged("Receta");
				this.OnRecetaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProximoControl", DbType="Date NOT NULL")]
	public System.DateTime ProximoControl
	{
		get
		{
			return this._ProximoControl;
		}
		set
		{
			if ((this._ProximoControl != value))
			{
				this.OnProximoControlChanging(value);
				this.SendPropertyChanging();
				this._ProximoControl = value;
				this.SendPropertyChanged("ProximoControl");
				this.OnProximoControlChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alta", DbType="TinyInt NOT NULL")]
	public byte Alta
	{
		get
		{
			return this._Alta;
		}
		set
		{
			if ((this._Alta != value))
			{
				this.OnAltaChanging(value);
				this.SendPropertyChanging();
				this._Alta = value;
				this.SendPropertyChanged("Alta");
				this.OnAltaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HistoriaClinica_ConsultaHistoriaClinica", Storage="_HistoriaClinica", ThisKey="ID_HistoriaClinica", OtherKey="ID_HistoriaClinica", IsForeignKey=true)]
	public HistoriaClinica HistoriaClinica
	{
		get
		{
			return this._HistoriaClinica.Entity;
		}
		set
		{
			HistoriaClinica previousValue = this._HistoriaClinica.Entity;
			if (((previousValue != value) 
						|| (this._HistoriaClinica.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._HistoriaClinica.Entity = null;
					previousValue.ConsultaHistoriaClinicas.Remove(this);
				}
				this._HistoriaClinica.Entity = value;
				if ((value != null))
				{
					value.ConsultaHistoriaClinicas.Add(this);
					this._ID_HistoriaClinica = value.ID_HistoriaClinica;
				}
				else
				{
					this._ID_HistoriaClinica = default(int);
				}
				this.SendPropertyChanged("HistoriaClinica");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
